[{"/Users/nehaparmar/Downloads/AnimeApp-main/src/index.js":"1","/Users/nehaparmar/Downloads/AnimeApp-main/src/App.js":"2","/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/AnimeList.js":"3","/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/AddToList.js":"4","/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/AnimeInfo.js":"5","/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/RemoveFromList.js":"6"},{"size":235,"mtime":1727433715715,"results":"7","hashOfConfig":"8"},{"size":6794,"mtime":1727433741349,"results":"9","hashOfConfig":"8"},{"size":982,"mtime":1663312974000,"results":"10","hashOfConfig":"8"},{"size":173,"mtime":1663312974000,"results":"11","hashOfConfig":"8"},{"size":780,"mtime":1663312974000,"results":"12","hashOfConfig":"8"},{"size":167,"mtime":1663312974000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hmv3ot",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nehaparmar/Downloads/AnimeApp-main/src/index.js",[],[],"/Users/nehaparmar/Downloads/AnimeApp-main/src/App.js",["33","34"],[],"import React, { useEffect, useState, useCallback } from \"react\";\nimport './Components/style.css';\nimport { AnimeList } from \"./Components/AnimeList\";\nimport { AnimeInfo } from \"./Components/AnimeInfo\";\nimport { AddToList } from \"./Components/AddToList\";\nimport { RemoveFromList } from \"./Components/RemoveFromList\";\n\nfunction debounce(func, delay) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}\n\nfunction App() {\n  const [search, setSearch] = useState('Naruto');\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [animeData, setAnimeData] = useState([]);\n  const [animeInfo, setAnimeInfo] = useState();\n  const [myAnimeList, setMyAnimeList] = useState([]);\n  const [recommendedAnime, setRecommendedAnime] = useState([]);\n  const [userChoiceRecommendations, setUserChoiceRecommendations] = useState([]);\n  const [filteredAnime, setFilteredAnime] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false); // Theme state\n\n  const genres = [\n    { id: 1, name: 'Action' },\n    { id: 2, name: 'Adventure' },\n    { id: 3, name: 'Fantasy' },\n    { id: 4, name: 'Romance' },\n  ];\n\n  const addTo = (anime) => {\n    const index = myAnimeList.findIndex((myanime) => myanime.mal_id === anime.mal_id);\n    if (index < 0) {\n      setMyAnimeList([...myAnimeList, anime]);\n      updateUserChoiceRecommendations(anime.genres);\n    }\n  };\n\n  const removeFrom = (anime) => {\n    const newArray = myAnimeList.filter((myanime) => myanime.mal_id !== anime.mal_id);\n    setMyAnimeList(newArray);\n    setUserChoiceRecommendations([]);\n  };\n\n  const updateUserChoiceRecommendations = async (genres) => {\n    const genreIds = genres.map(genre => genre.mal_id).join(',');\n    try {\n      const res = await fetch(`https://api.jikan.moe/v4/anime?genres=${genreIds}&limit=6`);\n      const data = await res.json();\n      setUserChoiceRecommendations(data.data);\n    } catch (error) {\n      console.error(\"Error fetching user choice recommendations:\", error);\n    }\n  };\n\n  const getData = async () => {\n    setLoading(true);\n    try {\n      const genreQuery = selectedGenres.length ? `&genres=${selectedGenres.join(',')}` : '';\n      const res = await fetch(`https://api.jikan.moe/v4/anime?q=${search}${genreQuery}&limit=6`);\n      const resData = await res.json();\n      setAnimeData(resData.data);\n    } catch (error) {\n      console.error(\"Error fetching anime data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRecommendedData = async () => {\n    try {\n      const recommendedRes = await fetch(`https://api.jikan.moe/v4/anime?order_by=score&sort=desc&limit=6`);\n      const recommendedData = await recommendedRes.json();\n      setRecommendedAnime(recommendedData.data);\n    } catch (error) {\n      console.error(\"Error fetching recommended anime:\", error);\n    }\n  };\n\n  const getAnimeByGenre = async (genreId) => {\n    setLoading(true);\n    try {\n      const res = await fetch(`https://api.jikan.moe/v4/anime?genres=${genreId}&limit=6`);\n      const resData = await res.json();\n      setFilteredAnime(resData.data);\n    } catch (error) {\n      console.error(\"Error fetching anime by genre:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const debouncedFetch = useCallback(debounce(getData, 500), [search, selectedGenres]);\n\n  useEffect(() => {\n    debouncedFetch();\n  }, [search, debouncedFetch, selectedGenres]);\n\n  useEffect(() => {\n    getRecommendedData();\n  }, []);\n\n  const handleGenreClick = (genreId) => {\n    setSelectedGenres((prev) => \n      prev.includes(genreId) ? prev.filter(id => id !== genreId) : [...prev, genreId]\n    );\n    getAnimeByGenre(genreId);\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    <div className={isDarkMode ? 'dark-mode' : 'light-mode'}>\n      <div className=\"header\" data-bs-theme=\"light\">\n        <h1>MyAnimeList</h1>\n        <button onClick={toggleTheme}>\n          Switch to {isDarkMode ? 'Light' : 'Dark'} Mode\n        </button>\n        <div className=\"search-box\">\n          <input\n            type=\"search\"\n            placeholder=\"Search your anime\"\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <div className=\"genres\">\n          <h2 className=\"text-heading\">Genres</h2>\n          <ul style={{ overflowY: 'auto', maxHeight: '100px' }}>\n            {genres.map((genre) => (\n              <li \n                key={genre.id} \n                onClick={() => handleGenreClick(genre.id)}\n                style={{ cursor: 'pointer', color: selectedGenres.includes(genre.id) ? 'blue' : 'aqua' }}\n              >\n                {genre.name}\n              </li>\n            ))}\n          </ul>\n          \n        </div>\n      </div>\n      \n      <div className=\"container\" >\n        {loading && <p>Loading...</p>}\n        <div className=\"animeInfo\">\n          {animeInfo && <AnimeInfo animeInfo={animeInfo} />}\n        </div>\n        <div className=\"anime-row\">\n          <h2 className=\"text-heading\">Anime</h2>\n          <div className=\"row\">\n            <AnimeList\n              animelist={animeData}\n              setAnimeInfo={setAnimeInfo}\n              animeComponent={AddToList}\n              handleList={addTo}\n            />\n          </div>\n\n          <h2 className=\"text-heading\">My List</h2>\n          <div className=\"row\">\n            <AnimeList\n              animelist={myAnimeList}\n              setAnimeInfo={setAnimeInfo}\n              animeComponent={RemoveFromList}\n              handleList={removeFrom}\n            />\n          </div>\n\n          <h2 className=\"text-heading\">Recommended Anime</h2>\n          <div className=\"row\">\n            <AnimeList\n              animelist={recommendedAnime}\n              setAnimeInfo={setAnimeInfo}\n              animeComponent={AddToList}\n              handleList={addTo}\n            />\n          </div>\n\n          <h2 className=\"text-heading\">Your Choice Recommendations</h2>\n          <div className=\"row\">\n            <AnimeList\n              animelist={userChoiceRecommendations}\n              setAnimeInfo={setAnimeInfo}\n              animeComponent={AddToList}\n              handleList={addTo}\n            />\n          </div>\n\n          <h2 className=\"text-heading\">Filtered Anime by Genre</h2>\n          <div className=\"row\">\n            <AnimeList\n              animelist={filteredAnime}\n              setAnimeInfo={setAnimeInfo}\n              animeComponent={AddToList}\n              handleList={addTo}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/AnimeList.js",[],[],"/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/AddToList.js",[],[],"/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/AnimeInfo.js",[],[],"/Users/nehaparmar/Downloads/AnimeApp-main/src/Components/RemoveFromList.js",[],[],{"ruleId":"35","severity":1,"message":"36","line":99,"column":26,"nodeType":"37","endLine":99,"endColumn":37},{"ruleId":"38","severity":1,"message":"39","line":120,"column":9,"nodeType":"37","messageId":"40","endLine":120,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'scrollToTop' is assigned a value but never used.","unusedVar"]